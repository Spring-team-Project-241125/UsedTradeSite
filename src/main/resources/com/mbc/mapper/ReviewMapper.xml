<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.mbc.mapper.ReviewMapper">
   
   <insert id="register">
   <selectKey keyProperty="rno" resultType="Long" order="BEFORE">
         SELECT seq_rno.NEXTVAL FROM DUAL
      </selectKey>
      insert into Reviews (rno, pno, uno, r_content)
      values (${rno}, #{pno}, #{uno}, #{r_content} )
   </insert>
   
   

   <select id="read" resultType="com.mbc.domain.ReviewVO">
      SELECT r.rno, r.pno, r.uno, r.r_content, r.r_regdate, 
          p.p_title, u.id AS sellerId, buyer.id AS buyerId
   FROM Reviews r
   JOIN Products p ON r.pno = p.pno
   LEFT JOIN Users u ON p.uno = u.uno
   LEFT JOIN Users buyer ON r.uno = buyer.uno
   where rno = #{rno}
   </select>
   
   <delete id="delete">
      delete from reviews where rno = #{rno}
   </delete>
   
   <update id="update">
      update reviews 
      set r_content= #{r_content},
      r_updatedate = sysdate 
      where rno = #{rno}
   </update>
   
   
   
   
   
   
<sql id="criteria">
  <trim prefix="(" suffix=")" prefixOverrides="OR">
    <foreach item="type" collection="typeArr" separator="OR">
      
      <if test="type == 'T'.toString()">
        r.pno in (
          select p.pno
          from Products p
          where UPPER(p.p_title) like '%' || UPPER(#{keyword}) || '%'
        )
      </if>
      
      <if test="type == 'C'.toString()">
        r.rno in (
          select r.rno
          from Reviews r
          join Users u on r.uno = u.uno
          where UPPER(u.id) like '%' || UPPER(#{keyword}) || '%'
        )
      </if>
      
      <if test="type == 'W'.toString()">
        r.rno in (
          select r.rno
          from Reviews r
          where UPPER(r.r_content) like '%' || UPPER(#{keyword}) || '%'
        )
      </if>
    </foreach>
  </trim>
</sql>

 <select id="getReviewListWithProductAndbuyerIdAndsellerId" resultType="com.mbc.domain.ReviewVO">
  select r.rno, r.pno, r.uno, r.r_content, r.r_regdate,
         p.p_title, 
         buyer.id AS buyerId, 
         u.id AS sellerId
  from (
      select rno, pno, uno, r_content, r_regdate, rownum rn
      from (
          select r.rno, r.pno, r.uno, r.r_content, r.r_regdate
          from Reviews r
          <where>
            <include refid="criteria" />
          </where>
          order by r.rno desc
      )
  ) r
  left join Products p ON r.pno = p.pno  
  left join Users u ON p.uno = u.uno  
  left join Users buyer ON r.uno = buyer.uno
  
  <!-- 페이지네이션을 위한 rownum 범위 설정 -->
  where r.rn between (#{pagenum} - 1) * #{amount} + 1 and #{pagenum} * #{amount}
</select>




<select id="getTotalCount" resultType="int">
     SELECT count(*) 
     FROM Reviews r
     <where>
         <include refid="criteria"></include>
     </where>
</select>

  
<select id="getReviewListByUno" resultType="com.mbc.domain.ReviewVO">
	   SELECT 
	       r.rno, 
	       r.pno, 
	       r.uno, 
	       r.r_content, 
	       r.r_img_path, 
	       r.r_img_name, 
	       r.r_img_o_name, 
	       r.r_regdate, 
	       r.r_updatedate, 
	       p.p_title AS productTitle,   -- 상품명
	       u.id AS sellerId             -- 판매자 ID
	   FROM Reviews r
	   LEFT JOIN Products p ON r.pno = p.pno
	   LEFT JOIN Users u ON r.uno = u.uno  -- 판매자 정보 가져오기
	   WHERE r.uno = #{uno}
	   ORDER BY r.r_regdate DESC
	</select>
       
       
       
       
       
</mapper>