<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mbc.mapper.ProductMapper">

  <!-- <sql id="criteria">
  <trim prefix="(" suffix=") AND " prefixOverrides="OR">
  		<foreach item='type' collection="typeArr">
  			<trim prefix="OR">
  				<choose>
  					<when test="type == 'T'.toString()">
  						p_title like '%' || #{keyword}||'%'
  					</when>
  					<when test="type == 'C'.toString()">
  						p_content like '%' || #{keyword}||'%'
  					</when>
  					<when test="type == 'W'.toString()">
  						writer like '%' || #{keyword}||'%'
  					</when>
  				</choose>
  			</trim>
  		</foreach>
  	</trim>
  </sql> -->
  
  
  <sql id="criteria">
  <trim prefix="(" suffix=") AND">
  		<foreach item="type" collection="typeArr" separator="OR">
      <if test="type == 'T'.toString()">
        -- p_title을 대소문자 구분 없이 검색
        UPPER(p_title) like '%' || UPPER(#{keyword}) || '%'
      </if>
      <if test="type == 'C'.toString()">
        -- p_content을 대소문자 구분 없이 검색
        UPPER(p_content) like '%' || UPPER(#{keyword}) || '%'
      </if>
      <if test="type == 'W'.toString()">
        -- Users 테이블과 조인하여 id를 대소문자 구분 없이 검색
        pno in (
          select pno
          from Products p
          join Users u on p.uno = u.uno
          where UPPER(u.id) like '%' || UPPER(#{keyword}) || '%'
        )
      </if>
    </foreach>
  	</trim>
  </sql>
  
  <!-- prefixOverrides 거의 쓸 일 없음...separator 쓰자-->

  <select id="getListWithPaging" resultType="com.mbc.domain.ProductVO">
  <![CDATA[
  select pno, uno, cate_no, p_title, p_content, p_price, p_quantity, p_regdate, p_updatedate
  from (
      select 
      rownum rn, pno, uno, cate_no, p_title, p_content, p_price, p_quantity, p_regdate, p_updatedate
      from Products
      where 
  ]]>
  	
  <include refid="criteria"></include>
  	
  <![CDATA[
  	 rownum <= #{pagenum} * #{amount}
  	 )
  where rn > (#{pagenum} -1) * #{amount}
  ]]>
  </select>

  <insert id="insert">
  	insert into Products(pno, uno, cate_no, p_title, p_content, p_price, p_quantity)
  	values(seq_pno.nextval, 
           #{uno},   -- 사용자 ID
           #{cate_no}, -- 카테고리 ID
           #{p_title}, -- 상품 제목
           #{p_content}, -- 상품 설명
           #{p_price}, -- 상품 가격
           #{p_quantity} -- 상품 수량
           )   
  </insert>
  
  <insert id="insertSelectKey">
  	<selectKey keyProperty="pno" order="BEFORE"
  		resultType="long">
  		select seq_pno.nextval from dual
  	</selectKey>
  	
  	insert into Products (pno, uno, cate_no, p_title, p_content, p_price, p_quantity)
  	values (#{pno}, #{uno}, #{cate_no}, #{p_title}, #{p_content}, #{p_price}, #{p_quantity})
</insert>
  
  <select id="read" resultType="com.mbc.domain.ProductVO">
  	select * from Products where pno = #{pno}
  </select>
  
  <delete id="delete">
  	delete from Products where pno = #{pno}
  </delete>
  
  <update id="update">
  	update Products 
  	set p_title = #{p_title}, p_content = #{p_content}, p_price = #{p_price}, -- 수정되는 내용
  	p_updatedate = sysdate
  	where pno = #{pno}
</update>
  
  <select id="getTotalCount" resultType="int">
  	select count(*) from Products where 
  	<include refid="criteria"></include>
  	pno > 0
  </select>
  
  <select id="getProductsByUno" resultType="com.mbc.domain.ProductVO" parameterType="long">
	   SELECT p.pno, p.uno, p.cate_no, p.p_title, p.p_content, p.p_price, p.p_quantity, 
	          p.p_regdate, p.p_updatedate, 
	          u.id AS sellerId
	   FROM Products p
	   LEFT JOIN Users u ON p.uno = u.uno
	   WHERE p.uno = #{uno}
	   ORDER BY p.p_regdate DESC
  </select> 

</mapper>

